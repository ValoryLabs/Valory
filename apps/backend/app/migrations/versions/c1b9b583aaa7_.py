"""empty message

Revision ID: c1b9b583aaa7
Revises: 
Create Date: 2025-09-10 17:41:09.645345

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c1b9b583aaa7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_overlays_style_created'), table_name='overlays')
    op.drop_index(op.f('ix_overlays_updated_desc'), table_name='overlays')
    op.drop_index(op.f('ix_overlays_user_active'), table_name='overlays')
    op.drop_index(op.f('ix_overlays_user_id'), table_name='overlays')
    op.drop_table('overlays')
    op.drop_index(op.f('ix_users_active_created'), table_name='users')
    op.drop_index(op.f('ix_users_twitch_id'), table_name='users')
    op.drop_index(op.f('ix_users_twitch_lookup'), table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False, comment='Unique identifier for the user'),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Unique username for application login'),
    sa.Column('broadcaster_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Type of broadcaster (e.g., affiliate, partner, etc.)'),
    sa.Column('avatar_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment="URL to user's profile picture"),
    sa.Column('twitch_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Twitch platform user identifier'),
    sa.Column('twitch_display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Display name shown on Twitch platform'),
    sa.Column('riot_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Riot Games account identifier (username#tag format)'),
    sa.Column('hdev_api_key', sa.VARCHAR(length=200), autoincrement=False, nullable=True, comment='Henrik Dev API key for VALORANT statistics access'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Account status flag - False for suspended/deleted accounts'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Account creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Last account modification timestamp'),
    sa.CheckConstraint("avatar_url IS NULL OR avatar_url::text ~ '^https?://'::text", name='ck_users_avatar_url_format'),
    sa.CheckConstraint("hdev_api_key IS NULL OR hdev_api_key::text ~ '^HDEV-[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$'::text", name='ck_users_hdev_key_format'),
    sa.CheckConstraint("length(username::text) >= 3 AND username::text ~ '^[a-zA-Z0-9_-]+$'::text", name='ck_users_username_format'),
    sa.CheckConstraint("riot_id IS NULL OR riot_id::text ~ '^[a-zA-Z0-9\\s]{3,16}#[a-zA-Z0-9]{3,5}$'::text", name='ck_users_riot_id_format'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('twitch_id', name='uq_users_twitch_id', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Application users with gaming platform integrations',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_twitch_lookup'), 'users', ['twitch_id', 'twitch_display_name'], unique=False)
    op.create_index(op.f('ix_users_twitch_id'), 'users', ['twitch_id'], unique=True)
    op.create_index(op.f('ix_users_active_created'), 'users', ['is_active', 'created_at'], unique=False)
    op.create_table('overlays',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False, comment='Unique identifier for the overlay configuration'),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Reference to the user who owns this overlay'),
    sa.Column('overlay_style', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Visual style variant for the overlay presentation'),
    sa.Column('background_color', sa.VARCHAR(length=7), autoincrement=False, nullable=False, comment='Primary background color in hexadecimal format'),
    sa.Column('disabled_background', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Flag to disable background rendering'),
    sa.Column('disabled_border', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Flag to disable border rendering around overlay elements'),
    sa.Column('disabled_background_gradient', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Flag to disable gradient effects on background'),
    sa.Column('disabled_glow_effect', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Flag to disable glow visual effects'),
    sa.Column('disabled_peak_rank_icon', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Flag to hide peak rank icon display'),
    sa.Column('disabled_leaderboard_place', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Flag to hide leaderboard position display'),
    sa.Column('disabled_peak_rr', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Flag to hide peak rating (RR) display'),
    sa.Column('text_color', sa.VARCHAR(length=7), autoincrement=False, nullable=False, comment='Primary text color in hexadecimal format'),
    sa.Column('primary_color', sa.VARCHAR(length=7), autoincrement=False, nullable=False, comment='Secondary text color for highlights in hexadecimal format'),
    sa.Column('overlay_font', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Font family name for text rendering'),
    sa.Column('win_color', sa.VARCHAR(length=7), autoincrement=False, nullable=False, comment='Color for win indicators in hexadecimal format'),
    sa.Column('lose_color', sa.VARCHAR(length=7), autoincrement=False, nullable=False, comment='Color for loss indicators in hexadecimal format'),
    sa.Column('disabled_win_lose', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Flag to hide win/loss indicator display'),
    sa.Column('disabled_last_match_points', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Flag to hide recent match points display'),
    sa.Column('disabled_progress', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Flag to hide progress bar display'),
    sa.Column('progress_color', sa.VARCHAR(length=7), autoincrement=False, nullable=False, comment='Progress bar fill color in hexadecimal format'),
    sa.Column('progress_bg_color', sa.VARCHAR(length=7), autoincrement=False, nullable=False, comment='Progress bar background color in hexadecimal format'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Flag indicating if overlay is currently active'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Timestamp when overlay was created'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Timestamp when overlay was last modified'),
    sa.CheckConstraint("background_color::text ~ '^#[0-9A-Fa-f]{6}$'::text", name=op.f('ck_overlay_background_color_hex')),
    sa.CheckConstraint("lose_color::text ~ '^#[0-9A-Fa-f]{6}$'::text", name=op.f('ck_overlay_lose_color_hex')),
    sa.CheckConstraint("overlay_font::text ~ '^[a-zA-Z0-9\\s-]+$'::text AND length(overlay_font::text) >= 2", name=op.f('ck_overlay_font_format')),
    sa.CheckConstraint("overlay_style::text = ANY (ARRAY['old'::character varying, 'new'::character varying, 'minimal'::character varying, 'new_v2'::character varying]::text[])", name=op.f('ck_overlay_style_enum')),
    sa.CheckConstraint("primary_color::text ~ '^#[0-9A-Fa-f]{6}$'::text", name=op.f('ck_overlay_primary_color_hex')),
    sa.CheckConstraint("progress_bg_color::text ~ '^#[0-9A-Fa-f]{6}$'::text", name=op.f('ck_overlay_progress_bg_color_hex')),
    sa.CheckConstraint("progress_color::text ~ '^#[0-9A-Fa-f]{6}$'::text", name=op.f('ck_overlay_progress_color_hex')),
    sa.CheckConstraint("text_color::text ~ '^#[0-9A-Fa-f]{6}$'::text", name=op.f('ck_overlay_text_color_hex')),
    sa.CheckConstraint("win_color::text ~ '^#[0-9A-Fa-f]{6}$'::text", name=op.f('ck_overlay_win_color_hex')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('overlays_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('overlays_pkey')),
    comment='Streaming overlay configurations with visual and functional settings'
    )
    op.create_index(op.f('ix_overlays_user_id'), 'overlays', ['user_id'], unique=False)
    op.create_index(op.f('ix_overlays_user_active'), 'overlays', ['user_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_overlays_updated_desc'), 'overlays', [sa.literal_column('updated_at DESC')], unique=False)
    op.create_index(op.f('ix_overlays_style_created'), 'overlays', ['overlay_style', 'created_at'], unique=False)
    # ### end Alembic commands ###
